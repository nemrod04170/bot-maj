import asyncio
from dotenv import load_dotenv
import os
load_dotenv()
API_KEY = os.getenv('API_KEY')
API_SECRET = os.getenv('API_SECRET')
import os
from dotenv import load_dotenv
import os
load_dotenv()
api_key = API_KEY
api_secret = API_SECRET
if not api_key or not api_secret:
    raise Exception("‚ùå CL√âS API BINANCE MANQUANTES : le fichier .env doit contenir API_KEY et API_SECRET dans le dossier du bot.")

load_dotenv()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Moteur de Trading Principal - Temps R√©el
Architecture modulaire sans donn√©es en dur
"""

import ccxt
import pandas as pd
import numpy as np
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Callable
import threading

from websocket_realtime import BinanceWebSocketManager
from scalping_scanner import ScalpingScanner

class TechnicalIndicators:
    """Calculateurs d'indicateurs techniques optimis√©s"""
    
    @staticmethod
    def rsi(data: pd.Series, period: int = 14) -> pd.Series:
        """Calcule le RSI"""
        delta = data.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        return 100 - (100 / (1 + rs))
    
    @staticmethod
    def macd(data: pd.Series, fast: int = 12, slow: int = 26, signal: int = 9) -> Dict:
        """Calcule le MACD"""
        exp1 = data.ewm(span=fast).mean()
        exp2 = data.ewm(span=slow).mean()
        macd_line = exp1 - exp2
        signal_line = macd_line.ewm(span=signal).mean()
        histogram = macd_line - signal_line
        
        return {
            'macd': macd_line,
            'signal': signal_line,
            'histogram': histogram
        }
    
    @staticmethod
    def ema(data: pd.Series, period: int) -> pd.Series:
        """Calcule la moyenne mobile exponentielle"""
        return data.ewm(span=period).mean()

class RiskManager:
    """Gestionnaire des risques configur√© depuis config.txt"""
    
    def __init__(self, config: Dict):
        self.max_position_size = config.get('max_position_size', 0.05)
        self.max_total_exposure = config.get('max_total_exposure', 0.20)
        self.max_daily_loss = config.get('max_daily_loss', 0.05)
        self.stop_loss_percent = config.get('stop_loss_percent', 2.0)
        
        self.daily_pnl = 0.0
        self.daily_reset_date = datetime.now().date()
    
    def calculate_position_size(self, balance: float, entry_price: float) -> float:
        """Calcule la taille de position optimale"""
        risk_amount = balance * self.max_position_size
        return risk_amount / entry_price
    
    def calculate_stop_loss(self, entry_price: float, direction: str) -> float:
        """Calcule le prix de stop loss"""
        percent = self.stop_loss_percent / 100
        
        if direction == 'long':
            return entry_price * (1 - percent)
        else:  # short
            return entry_price * (1 + percent)
    
    def check_daily_loss_limit(self) -> bool:
        """V√©rifie la limite de perte quotidienne"""
        if datetime.now().date() > self.daily_reset_date:
            self.daily_pnl = 0.0
            self.daily_reset_date = datetime.now().date()
        
        return self.daily_pnl < -self.max_daily_loss

class SignalGenerator:
    """G√©n√©rateur de signaux configur√© depuis config.txt"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.indicators = TechnicalIndicators()
        
        # Configuration depuis config.txt
        self.signal_threshold = config.get('threshold', 35)
        self.min_confidence = config.get('min_confidence', 0.6)
        
        # Poids des indicateurs
        weights = config.get('weights', {})
        self.rsi_weight = weights.get('rsi', 25)
        self.macd_weight = weights.get('macd', 30)
        self.ema_weight = weights.get('ema', 25)
        self.volume_weight = weights.get('volume', 20)
        
        # Configuration RSI
        rsi_config = config.get('rsi', {})
        self.rsi_period = rsi_config.get('period', 14)
        self.rsi_oversold = rsi_config.get('oversold', 30)
        self.rsi_overbought = rsi_config.get('overbought', 70)
        
        # Configuration MACD
        macd_config = config.get('macd', {})
        self.macd_fast = macd_config.get('fast', 12)
        self.macd_slow = macd_config.get('slow', 26)
        self.macd_signal = macd_config.get('signal', 9)
        
        # Configuration EMA
        ema_config = config.get('ema', {})
        self.ema_fast = ema_config.get('fast', 9)
        self.ema_medium = ema_config.get('medium', 21)
        self.ema_slow = ema_config.get('slow', 50)
    
    def analyze_symbol(self, symbol: str, current_price: float, 
                      kline_df: pd.DataFrame, volume_24h: float, change_24h: float) -> Dict:
        """Analyse SIMPLIFI√âE pour cryptos pr√©-s√©lectionn√©es - utilise le score du scan"""
        
        # Si la crypto est dans la watchlist, elle a D√âJ√Ä pass√© tous les filtres du scan
        # On doit juste g√©n√©rer un signal de trading bas√© sur le momentum actuel
        
        # Score bas√© uniquement sur momentum actuel (pas de RSI/MACD/EMA complexe)
        score = 0
        confidence_factors = []
        
        # 1. Score momentum 24h (principal crit√®re) - 70% du score
        momentum_score = 0
        if change_24h >= 8:      # Hausse tr√®s forte
            momentum_score = 70
            confidence_factors.append("VERY_STRONG_MOMENTUM")
        elif change_24h >= 5:    # Hausse forte  
            momentum_score = 60
            confidence_factors.append("STRONG_MOMENTUM")
        elif change_24h >= 3:    # Hausse mod√©r√©e
            momentum_score = 50
            confidence_factors.append("MODERATE_MOMENTUM")
        elif change_24h >= 1:    # Hausse l√©g√®re
            momentum_score = 40
            confidence_factors.append("LIGHT_MOMENTUM")
        else:                    # Stable ou baisse
            momentum_score = 20
            confidence_factors.append("NEUTRAL_MOMENTUM")
        
        score += momentum_score
        
        # 2. Score volume - 30% du score
        volume_score = 0
        if volume_24h >= 50_000_000:  # Volume tr√®s √©lev√©
            volume_score = 30
            confidence_factors.append("HIGH_VOLUME")
        elif volume_24h >= 20_000_000:  # Volume √©lev√©
            volume_score = 25
            confidence_factors.append("GOOD_VOLUME")
        elif volume_24h >= 10_000_000:  # Volume correct
            volume_score = 20
            confidence_factors.append("ADEQUATE_VOLUME")
        else:                           # Volume moyen
            volume_score = 15
            confidence_factors.append("AVERAGE_VOLUME")
        
        score += volume_score
        
        # 3. D√©cision de trading - SEUIL UNIFI√â avec le scan
        if score >= self.signal_threshold:
            signal = 'BUY'
        else:
            signal = 'HOLD'
        
        # 4. Confiance bas√©e sur la pr√©-s√©lection + momentum
        confidence = min(score / 100, 1.0)
        
        # Bonus confiance car crypto d√©j√† pr√©-s√©lectionn√©e par le scan
        confidence = min(confidence + 0.2, 1.0)  # +20% car pr√©-s√©lectionn√©e
        confidence_factors.append("PRE_SELECTED_BY_SCAN")
        
        reason = f"Signal {signal} - Crypto pr√©-s√©lectionn√©e - Facteurs: {', '.join(confidence_factors)}"
        
        return {
            'signal': signal,
            'score': score,
            'confidence': confidence,
            'rsi': 50,  # Valeurs neutres car pas utilis√©es
            'macd': 0.1 if change_24h > 0 else -0.1,
            'price': current_price,
            'change_24h': change_24h,
            'confidence_factors': confidence_factors,
            'reason': reason,
            'pre_selected': True,  # Marquer comme pr√©-s√©lectionn√©e
            'timestamp': datetime.now()
        }
    
    def _analyze_simple_momentum(self, symbol: str, current_price: float, volume_24h: float, change_24h: float) -> Dict:
        """Analyse simplifi√©e bas√©e sur momentum quand peu de donn√©es"""
        
        score = 0
        confidence_factors = []
        
        # Score bas√© uniquement sur momentum et volume
        if change_24h >= 8:
            score = 75
            confidence_factors.append("STRONG_MOMENTUM_SIMPLE")
        elif change_24h >= 5:
            score = 65
            confidence_factors.append("GOOD_MOMENTUM_SIMPLE")
        elif change_24h >= 3:
            score = 55
            confidence_factors.append("MODERATE_MOMENTUM_SIMPLE")
        
        # Bonus volume
        if volume_24h >= 50_000_000:
            score += 10
            confidence_factors.append("HIGH_VOLUME_SIMPLE")
        
        signal = 'BUY' if score >= 55 else 'HOLD'
        confidence = min(score / 100, 1.0)
        
        self.log(f"üöÄ {symbol}: ANALYSE SIMPLIFI√âE - Score={score}, Signal={signal}")
        
        return {
            'signal': signal,
            'score': score,
            'confidence': confidence,
            'rsi': 50,  # Valeur neutre
            'macd': 0.1 if change_24h > 0 else -0.1,
            'price': current_price,
            'change_24h': change_24h,
            'confidence_factors': confidence_factors,
            'reason': f"Analyse simplifi√©e - {', '.join(confidence_factors)}",
            'simple_analysis': True,
            'timestamp': datetime.now()
        }

class CryptoTradingBot:
    """Bot de trading principal - Configuration 100% depuis config.txt"""
    
    def __init__(self, config_manager):
        self.config_manager = config_manager
        
        # Chargement des configurations
        self.exchange_config = config_manager.get_exchange_config()
        self.trading_config = config_manager.get_trading_config()
        self.scan_config = config_manager.get_scan_config()
        self.signal_config = config_manager.get_signal_config()
        
        # Variables de trading simul√©
        self.simulation_mode = config_manager.get('SIMULATION_MODE', True)
        self.initial_balance = config_manager.get('INITIAL_BALANCE', 2000.0)
        self.simulated_balance = self.initial_balance  # Balance de d√©part optimis√©e
        self.balance = self.initial_balance  # Balance actuelle
        self.position_size_usdt = config_manager.get('POSITION_SIZE_USDT', 100.0)  # 100‚Ç¨ par crypto
        self.total_trades = 0
        self.winning_trades = 0
        self.total_pnl = 0.0
        self.total_fees = 0.0  # NOUVEAU: Tracking des frais totaux
        self.max_cryptos = config_manager.get('MAX_CRYPTOS', 20)
        self.scan_interval_minutes = config_manager.get('SCAN_INTERVAL_MINUTES', 1)
        
        # CORRECTION: Initialiser open_positions
        self.open_positions = []
        
        # Syst√®me de s√©curit√© √† 3 couches
        self.trailing_stop_enabled = config_manager.get('TRAILING_STOP_ENABLED', True)
        self.trailing_stop_percent = config_manager.get('TRAILING_STOP_PERCENT', 0.3)
        self.trailing_activation_percent = config_manager.get('TRAILING_ACTIVATION_PERCENT', 0.4)
        self.timeout_exit_seconds = config_manager.get('TIMEOUT_EXIT_SECONDS', 45)
        self.stop_loss_percent = config_manager.get('STOP_LOSS_PERCENT', 0.6)
        
        # Tracking de slippage
        self.enable_slippage_tracking = config_manager.get('ENABLE_SLIPPAGE_TRACKING', True)
        self.max_acceptable_slippage = config_manager.get('MAX_ACCEPTABLE_SLIPPAGE', 0.2)
        self.slippage_history = []
        
        # NOUVEAU: Syst√®me de portefeuille virtuel persistant
        self.portfolio_file = 'portfolio_state.json'
        self.closed_trades = []
        self.last_save_time = datetime.now()
        
        # Callbacks
        self.callbacks = {
            'log_message': [],
            'scan_update': [],
            'position_update': [],
            'exchange_status': [],
            'trade_executed': [],
            'balance_update': [],
            'position_closed': [],
            'trade_closed': [],
            'price_update': []
        }
        
        # Initialiser l'exchange avec les vraies cl√©s
        self.exchange = None  # Initialiser d'abord
        if not self._initialize_exchange():
            self.log("‚ùå Impossible de se connecter √† Binance")
            self.log("   V√©rifiez vos cl√©s API dans l'onglet Configuration")
            # Ne pas retourner ici - continuer l'initialisation mais marquer comme non connect√©
            self.exchange_connected = False
        else:
            self.exchange_connected = True
        
        # Composants du bot
        self.risk_manager = RiskManager(self.trading_config)
        self.signal_generator = SignalGenerator(self.signal_config)
        self.websocket_manager = None
        
        # √âtat du bot
        self.is_running = False
        self.simulation_mode = self.trading_config['simulation_mode']
        self.watchlist = []
        self.positions = {}
        self.balance = 0.0
        
        # D√©marrer le thread de sauvegarde automatique APR√àS l'initialisation de is_running
        threading.Thread(target=self._auto_save_portfolio, daemon=True).start()
        
        # Charger l'√©tat du portefeuille APR√àS l'initialisation de is_running
        self.load_portfolio_state()
        
        # Cache et analyse
        self.last_analysis_time = {}
        self.analysis_cooldown = 5  # R√©duit de 30 √† 5 secondes pour scalping
        
        self.log("üöÄ Bot de trading initialis√©")
        self.log(f"üìä Mode: {'SIMULATION' if self.simulation_mode else 'R√âEL'}")
        
        # Initialiser la balance selon le mode
        if self.simulation_mode:
            self.balance = self.simulated_balance
        
        # Notifier la balance initiale
        self.log(f"üí∞ Solde initial: {self.balance:.2f} USDT")
        for callback in self.callbacks.get('balance_update', []):
            try:
                callback(self.balance, len(self.open_positions))
            except Exception:
                pass
    
    def _initialize_exchange(self):
        """Initialise la connexion exchange avec UNIQUEMENT les cl√©s priv√©es"""
        try:
            # R√©cup√©rer les cl√©s API depuis la config
            secret = self.exchange_config.get('secret', '').strip()
            testnet = self.exchange_config.get('testnet', False)
            
            self.log("üîê TEST DE CONNEXION BINANCE AVEC VOS CL√âS PRIV√âES")
            self.log("="*60)
            
            if not api_key or not secret:
                self.log("‚ùå CL√âS API PRIV√âES MANQUANTES")
                self.log("   Ajoutez vos cl√©s dans l'onglet Configuration")
                self.log("   API Key: MANQUANTE")
                self.log("   Secret: MANQUANTE")
                return False
            
            # Masquer les cl√©s pour la s√©curit√©
            secret_masked = API_SECRET[:8] + '...' + API_SECRET[-4:] if API_SECRET and len(API_SECRET) > 12 else '***'
            
            self.log(f"üîë Cl√©s API d√©tect√©es:")
            api_key_masked = API_KEY[:8] + '...' + API_KEY[-4:] if API_KEY and len(API_KEY) > 12 else '***'
            self.log(f"   API Key: {api_key_masked}")
            secret_masked = API_SECRET[:8] + '...' + API_SECRET[-4:] if API_SECRET and len(API_SECRET) > 12 else '***'
            self.log(f"   Secret: {secret_masked}")
            self.log(f"   Mode: {'TESTNET' if testnet else 'PRODUCTION'}")
            
            # Cr√©er l'exchange avec vos cl√©s priv√©es pour TOUTES les requ√™tes
            import ccxt
            self.log("üîó Cr√©ation de la connexion exchange...")
            self.exchange = ccxt.binance({
                'apiKey': api_key,
                'secret': secret,
                'sandbox': testnet,
                'enableRateLimit': True,
                'timeout': self.exchange_config.get('REST_TIMEOUT', 15) * 1000,
                'rateLimit': 60000 / self.exchange_config.get('MAX_REST_REQUESTS_PER_MINUTE', 1200)
            })
            
            # Test 1: Chargement des march√©s avec VOS cl√©s priv√©es
            self.log("üìä Test 1: Chargement des march√©s avec vos cl√©s priv√©es...")
            markets = self.exchange.load_markets()
            self.log(f"   ‚úÖ {len(markets)} march√©s charg√©s via vos cl√©s priv√©es")
            
            # Test 2: R√©cup√©ration du solde avec VOS cl√©s priv√©es
            self.log("üí∞ Test 2: R√©cup√©ration du solde avec vos cl√©s priv√©es...")
            balance = self.exchange.fetch_balance()
            self.log(f"   ‚úÖ Solde r√©cup√©r√© via vos cl√©s priv√©es")
            
            # Afficher les principales balances
            main_currencies = ['USDT', 'BTC', 'ETH', 'BNB', 'FDUSD', 'BUSD']
            for currency in main_currencies:
                if currency in balance and balance[currency]['total'] > 0:
                    free = balance[currency]['free']
                    used = balance[currency]['used']
                    total = balance[currency]['total']
                    self.log(f"   üíµ {currency}: {free:.8f} libre, {used:.8f} utilis√©, {total:.8f} total")
            
            # Test 3: R√©cup√©ration des tickers avec VOS cl√©s priv√©es
            self.log("üìà Test 3: R√©cup√©ration des tickers avec vos cl√©s priv√©es...")
            tickers = self.exchange.fetch_tickers()
            self.log(f"   ‚úÖ {len(tickers)} tickers r√©cup√©r√©s via vos cl√©s priv√©es")
            
            # Test 4: V√©rification des tickers populaires
            self.log("üîç Test 4: V√©rification des tickers populaires...")
            test_symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'DOT/USDT']
            for symbol in test_symbols:
                if symbol in tickers:
                    ticker = tickers[symbol]
                    price = ticker.get('last', 0)
                    volume = ticker.get('quoteVolume', 0)
                    volume_m = volume / 1000000 if volume else 0
                    self.log(f"   ‚úÖ {symbol}: ${price:.4f}, Volume: {volume_m:.1f}M")
            
            # Test 5: Test des permissions
            self.log("üîê Test 5: V√©rification des permissions...")
            try:
                orders = self.exchange.fetch_open_orders()
                self.log(f"   ‚úÖ Permissions OK - {len(orders)} ordres ouverts")
            except Exception as perm_e:
                if "permissions" in str(perm_e).lower():
                    self.log(f"   ‚ö†Ô∏è Permissions limit√©es: {perm_e}")
                else:
                    self.log(f"   ‚úÖ Permissions OK (pas d'ordres ouverts)")
            
            self.log("üéâ CONNEXION BINANCE R√âUSSIE AVEC VOS CL√âS PRIV√âES !")
            self.log("‚úÖ Toutes les requ√™tes utilisent vos cl√©s priv√©es")
            self.log("‚úÖ Le bot peut maintenant fonctionner correctement")
            self.log("="*60)
            
            # Notifier le GUI du succ√®s de connexion
            for callback in self.callbacks.get('exchange_status', []):
                try:
                    callback('connected', f"{len(markets)} march√©s", testnet)
                except Exception:
                    pass
            
            return True
            
        except ccxt.AuthenticationError as e:
            self.log("‚ùå ERREUR D'AUTHENTIFICATION AVEC VOS CL√âS")
            self.log(f"   D√©tails: {e}")
            self.log("   V√©rifiez vos cl√©s API dans l'onglet Configuration")
            self.log("   Assurez-vous que les cl√©s sont correctes et actives")
            
            # Notifier le GUI de l'erreur
            for callback in self.callbacks.get('exchange_status', []):
                try:
                    callback('auth_error', str(e), testnet)
                except Exception:
                    pass
            return False
        except ccxt.NetworkError as e:
            self.log("‚ùå ERREUR R√âSEAU AVEC VOS CL√âS")
            self.log(f"   D√©tails: {e}")
            self.log("   V√©rifiez votre connexion internet")
            
            # Notifier le GUI de l'erreur r√©seau
            for callback in self.callbacks.get('exchange_status', []):
                try:
                    callback('network_error', str(e), testnet)
                except Exception:
                    pass
            return False
        except Exception as e:
            self.log("‚ùå ERREUR INATTENDUE AVEC VOS CL√âS PRIV√âES")
            self.log(f"   D√©tails: {e}")
            
            # Notifier le GUI de l'erreur
            for callback in self.callbacks.get('exchange_status', []):
                try:
                    callback('error', str(e), testnet)
                except Exception:
                    pass
            return False
    
    def add_callback(self, event_type: str, callback: Callable):
        """Ajoute un callback pour les notifications"""
        if event_type in self.callbacks:
            self.callbacks[event_type].append(callback)
    
    def log(self, message: str):
        """Log avec notifications aux callbacks"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_msg = f"[{timestamp}] {message}"
        print(log_msg)
        
        # Notifier les callbacks
        for callback in self.callbacks['log_message']:
            try:
                callback(log_msg)
            except Exception:
                pass
    
    def setup_watchlist(self):
        """Configure la watchlist avec scan en boucle continue"""
        # Initialiser watchlist vide par d√©faut
        self.watchlist = []
        
        if self.scan_config['auto_scan_enabled']:
            # V√©rifier que l'exchange est connect√© avant de d√©marrer le scan
            if not hasattr(self, 'exchange_connected') or not self.exchange_connected:
                self.log("‚ùå Exchange non connect√© - Scan automatique d√©sactiv√©")
                self.log("   V√©rifiez vos cl√©s API dans l'onglet Configuration")
                return
            
            self.log("üîç Auto-scan CONTINU des cryptos activ√©")
            self._start_continuous_scanning()
        else:
            self.watchlist = self.scan_config['watchlist']
            self.log(f"üìã Watchlist manuelle: {self.watchlist}")
    
    def _start_continuous_scanning(self):
        """D√©marre le scan continu en arri√®re-plan avec robustesse maximale"""
        def scan_loop():
            consecutive_failures = 0
            max_consecutive_failures = 5
            
            self.log("üöÄ Thread de scan continu d√©marr√© avec robustesse maximale")
            
            while self.is_running:
                # Reload configuration for real-time changes
                try:
                    self.config_manager.load_config()
                    self.scan_config = self.config_manager.get_scan_config()
                except Exception:
                    pass
                try:
                    self.log("üîÑ D√©marrage nouveau cycle de scan...")
                    
                    # V√©rifier que l'exchange est toujours disponible
                    if not hasattr(self, 'exchange') or self.exchange is None:
                        self.log("‚ùå Exchange non disponible pour le scan")
                        raise Exception("Exchange non initialis√©")
                    
                    # Cr√©er le scanner SCALPING PROFESSIONNEL
                    from scalping_scanner import ScalpingScanner
                    scanner = ScalpingScanner(self.exchange, self.scan_config)
                    
                    # Effectuer le scan SCALPING avec timeout
                    scan_start_time = time.time()
                    opportunities = scanner.scan_scalping_opportunities()
                    scan_duration = time.time() - scan_start_time
                    
                    # R√©cup√©rer les stats du scan pour le GUI
                    scan_summary = scanner.get_scan_summary()
                    scan_stats = {
                        'strategy': 'scalping_professional',
                        'opportunities_found': len(opportunities),
                        'scan_time': scan_duration,
                        'timeframe': '1min',
                        'last_scan': datetime.now().isoformat()
                    }
                    selected_cryptos = opportunities[:3]  # Top 3 opportunit√©s
                    
                    self.log(f"üéØ Scan SCALPING termin√© en {scan_duration:.1f}s: {len(opportunities)} opportunit√©s trouv√©es")
                    
                    # DEBUG: V√©rifier les donn√©es avant transmission
                    self.log(f"üîß DEBUG: Stats scan = {scan_stats}")
                    self.log(f"üîß DEBUG: Cryptos s√©lectionn√©es = {len(selected_cryptos)} √©l√©ments")
                    if selected_cryptos:
                        self.log(f"üîß DEBUG: Premier √©l√©ment = {selected_cryptos[0]}")
                    
                    # Notifier le GUI avec les stats du scan
                    callback_count = len(self.callbacks.get('scan_update', []))
                    self.log(f"üîß DEBUG: Envoi donn√©es √† {callback_count} callbacks GUI")
                    
                    for i, callback in enumerate(self.callbacks.get('scan_update', [])):
                        try:
                            self.log(f"üîß DEBUG: Ex√©cution callback {i+1}/{callback_count}")
                            callback(scan_stats, selected_cryptos)
                            self.log(f"‚úÖ DEBUG: Callback {i+1} ex√©cut√© avec succ√®s")
                        except Exception as e:
                            self.log(f"‚ùå Erreur callback scan {i+1}: {e}")
                            import traceback
                            self.log(f"üîç Traceback: {traceback.format_exc()}")
                    
                    # Mettre √† jour la watchlist
                    new_watchlist = [c['symbol'] for c in opportunities[:self.scan_config['max_cryptos']]]
                    
                    # Reset compteur d'√©checs si le scan a r√©ussi
                    consecutive_failures = 0
                    
                    if new_watchlist:
                        # Cryptos trouv√©es
                        if set(new_watchlist) != set(self.watchlist):
                            self.log(f"üéØ Watchlist mise √† jour: {new_watchlist}")
                            self.watchlist = new_watchlist
                            
                            # Red√©marrer WebSocket avec nouvelles cryptos
                            if self.websocket_manager:
                                try:
                                    self.websocket_manager.restart_streams(self.watchlist)
                                except Exception as e:
                                    self.log(f"‚ùå Erreur red√©marrage WebSocket: {e}")
                        
                        # NOUVEAU : G√©n√©ration de trades bas√©e sur les opportunit√©s scann√©es
                        for opportunity in opportunities[:3]:  # Top 3 opportunit√©s
                            symbol = opportunity['symbol']
                            pump_3min = opportunity.get('pump_3min', 0)  # Utilise pump_3min uniquement
                            price = opportunity['price']
                            volume_24h = opportunity['volume_24h']
                            
                            # G√©n√©rer signal bas√© sur pump (momentum) - LOGIQUE SCALPING CORRIG√âE
                            signal = 'HOLD'
                            if pump_3min < -0.5:  # -0.5% = signal d'achat (acheter bas)
                                signal = 'BUY'
                            elif pump_3min > 0.5:  # +0.5% = signal de vente (vendre haut)
                                signal = 'SELL'
                            
                            if signal in ['BUY', 'SELL']:
                                print(f"üéØ {symbol}: Signal {signal} g√©n√©r√© (Pump: {pump_3min:+.2f}%)")
                                
                                # SIMULATION de trading avec vraies donn√©es du scan
                                if self.simulation_mode:
                                    self._execute_simulated_trade(symbol, {
                                        'signal': signal,
                                        'current_price': price,
                                        'change_24h': pump_3min,
                                        'volume_24h': volume_24h,
                                        'confidence': 0.8
                                    })
                        
                        # Afficher d√©tails des opportunit√©s SCALPING
                        for i, symbol in enumerate(self.watchlist, 1):
                            opportunity = next((c for c in opportunities if c['symbol'] == symbol), None)
                            if opportunity:
                                score = opportunity.get('score', 0)  # CORRIG√â : score au lieu de final_score
                                price = opportunity.get('price', 0)  # CORRIG√â : price au lieu de current_price
                                strategy = opportunity.get('strategy', 'scalping')
                                timeframe = opportunity.get('timeframe', '1min')
                                self.log(f"   {i}. {symbol} - Score: {score:.1f} - Prix: ${price:.4f} - {strategy.upper()} ({timeframe})")
                        
                        # Attendre avant prochain scan (cryptos trouv√©es)
                        # Utiliser configuration utilisateur pour l'intervalle
                        scan_interval_minutes = self.config_manager.get('SCAN_INTERVAL_MINUTES', 1)
                        scan_interval = scan_interval_minutes * 60  # Convertir en secondes
                        
                        self.log(f"‚è±Ô∏è Prochain scan dans {scan_interval_minutes} minute{'s' if scan_interval_minutes > 1 else ''}")
                        
                    else:
                        # Aucune crypto trouv√©e - scan plus fr√©quent mais continuer TOUJOURS
                        self.log("‚ö†Ô∏è Aucune crypto trouv√©e par l'auto-scan")
                        self.log("üîÑ Le scan va continuer √† chercher...")
                        
                        # Garder l'ancienne watchlist si elle existe
                        if not self.watchlist:
                            self.log("üìã Watchlist vide - scan continu activ√©")
                        
                        # Scan plus fr√©quent si rien trouv√© (30 secondes)
                        scan_interval = 30  # Scan toutes les 30 secondes si rien trouv√©
                    
                    self.log(f"‚è±Ô∏è Prochain scan dans {scan_interval} secondes")
                    
                    # Attendre avant le prochain scan avec interruption possible
                    for i in range(scan_interval):
                        if not self.is_running:
                            self.log("üõë Arr√™t du scan continu demand√©")
                            return
                        time.sleep(1)
                    
                except Exception as e:
                    consecutive_failures += 1
                    error_details = str(e)
                    self.log(f"‚ùå Erreur dans le scan continu (√©chec {consecutive_failures}): {error_details}")
                    
                    if consecutive_failures >= max_consecutive_failures:
                        self.log(f"üö® Trop d'√©checs cons√©cutifs ({consecutive_failures}) - R√©initialisation")
                        
                        # R√©initialiser le scanner et l'exchange
                        try:
                            import ccxt
                            self.exchange = ccxt.binance({
                                'apiKey': self.exchange_config['api_key'],
                                'secret': self.exchange_config['secret'],
                                'sandbox': self.exchange_config['testnet'],
                                'enableRateLimit': True,
                            })
                            self.exchange.load_markets()
                            self.log("üîÑ Exchange r√©initialis√© avec succ√®s")
                            consecutive_failures = 0
                        except Exception as ex:
                            self.log(f"‚ùå Erreur r√©initialisation exchange: {ex}")
                    
                    # Attendre plus longtemps en cas d'erreur, mais continuer
                    error_wait = min(60 + (consecutive_failures * 30), 300)  # Max 5 minutes
                    self.log(f"üîÑ Attente de {error_wait} secondes avant nouveau scan...")
                    
                    for i in range(error_wait):
                        if not self.is_running:
                            self.log("üõë Arr√™t du scan continu demand√©")
                            return
                        time.sleep(1)
                
                # Log p√©riodique d'activit√©
                if hasattr(self, '_last_activity_log'):
                    if time.time() - self._last_activity_log > 300:  # Toutes les 5 minutes
                        self.log("üîÑ Scan continu actif - Recherche permanente de cryptos...")
                        self._last_activity_log = time.time()
                else:
                    self._last_activity_log = time.time()
            
            self.log("üõë Thread de scan continu termin√©")
        
        # D√©marrer le scan continu dans un thread
        import threading
        self.scan_thread = threading.Thread(target=scan_loop, daemon=True, name="ContinuousScanThread")
        self.scan_thread.start()
        self.log("üöÄ Thread de scan continu d√©marr√© avec robustesse maximale")
    
    def setup_websockets(self):
        """Configure les WebSockets temps r√©el avec retry automatique et robustesse maximale + fallback"""
        if not self.watchlist:
            self.log("‚ö†Ô∏è Aucune crypto √† surveiller pour l'instant")
            # Programmer un retry dans 30 secondes
            import threading
            def retry_websocket():
                import time
                retry_count = 0
                max_retries = 10
                
                while self.is_running and not self.watchlist and retry_count < max_retries:
                    # Reload configuration for real-time changes
                    try:
                        self.config_manager.load_config()
                        self.scan_config = self.config_manager.get_scan_config()
                    except Exception:
                        pass
                    time.sleep(30)
                    retry_count += 1
                    self.log(f"üîÑ Retry WebSocket {retry_count}/{max_retries} - Attente watchlist...")
                    
                    if self.watchlist:
                        self.log("‚úÖ Watchlist disponible - D√©marrage WebSocket")
                        self.setup_websockets()
                        break
                
                if retry_count >= max_retries:
                    self.log("‚ùå Timeout attente watchlist pour WebSocket")
            
            threading.Thread(target=retry_websocket, daemon=True).start()
            return
        
        try:
            testnet = self.exchange_config.get('testnet', False)
            self.websocket_manager = BinanceWebSocketManager(testnet=testnet)
            
            # Callbacks WebSocket avec gestion d'erreurs robuste
            def on_price_update(data):
                try:
                    symbol = data['symbol']
                    self._process_realtime_data(symbol, data)
                    
                    # Notifier les callbacks GUI
                    for callback in self.callbacks['price_update']:
                        try:
                            callback(symbol, data)
                        except Exception as e:
                            self.log(f"‚ùå Erreur callback GUI price_update: {e}")
                except Exception as e:
                    self.log(f"‚ùå Erreur traitement price_update: {e}")
            
            def on_connection_status(status):
                try:
                    self.log(f"üîó WebSocket: {status}")
                    
                    # Si d√©connect√©, d√©marrer le syst√®me de fallback
                    if status in ['error', 'closed', 'stale']:
                        self.log("üîÑ WebSocket instable - Activation du syst√®me de fallback")
                        self._start_price_fallback_system()
                        
                        # Toujours essayer de reconnecter
                        import threading
                        def check_reconnection():
                            import time
                            time.sleep(30)
                            if self.is_running and self.websocket_manager:
                                health = self.websocket_manager.get_connection_health()
                                if not health['is_connected']:
                                    self.log("üîÑ Tentative de red√©marrage WebSocket forc√©...")
                                    try:
                                        self.websocket_manager.restart_streams(self.watchlist)
                                    except Exception as e:
                                        self.log(f"‚ùå Erreur red√©marrage forc√©: {e}")
                        
                        threading.Thread(target=check_reconnection, daemon=True).start()
                    
                    elif status == 'connected':
                        self.log("‚úÖ WebSocket reconnect√© avec succ√®s")
                        self._stop_price_fallback_system()  # Arr√™ter le fallback
                        
                except Exception as e:
                    self.log(f"‚ùå Erreur traitement connection_status: {e}")
            
            self.websocket_manager.add_callback('price_update', on_price_update)
            self.websocket_manager.add_callback('connection_status', on_connection_status)
            
            # D√©marrer les streams
            self.websocket_manager.start_price_streams(self.watchlist)
            
            self.log("‚ö° WebSockets temps r√©el activ√©s avec syst√®me de fallback")
            
            # Programmer une v√©rification p√©riodique de sant√©
            self._start_websocket_health_monitor()
            
            # D√©marrer le syst√®me de fallback IMM√âDIATEMENT en parall√®le
            import threading
            def immediate_fallback():
                time.sleep(2)  # Attendre juste 2 secondes
                if self.is_running:
                    self.log("üîÑ Activation fallback pr√©ventif - WebSocket peut prendre du temps")
                    self._start_price_fallback_system()
            
            threading.Thread(target=immediate_fallback, daemon=True).start()
            
        except Exception as e:
            self.log(f"‚ùå Erreur WebSockets: {e}")
            self.log("üîÑ Activation du syst√®me de fallback pour continuer le trading")
            self._start_price_fallback_system()
            
            # Programmer un retry selon configuration
            retry_interval = self.config_manager.get('SCAN_INTERVAL_MINUTES', 1) * 60
            import threading
            def retry_setup():
                import time
                time.sleep(retry_interval)
                if self.is_running and self.watchlist:
                    self.log("üîÑ Nouvelle tentative de configuration WebSocket...")
                    self.setup_websockets()
            
            threading.Thread(target=retry_setup, daemon=True).start()
    
    def _start_price_fallback_system(self):
        """D√©marre un syst√®me de fallback qui simule des donn√©es de prix pour continuer le trading"""
        if hasattr(self, '_fallback_running') and self._fallback_running:
            return  # D√©j√† en cours
        
        self._fallback_running = True
        self.log("üîÑ D√©marrage syst√®me de fallback pour donn√©es de prix")
        
        def fallback_price_generator():
            while self.is_running and self._fallback_running:
                # Reload configuration for real-time changes
                try:
                    self.config_manager.load_config()
                    self.scan_config = self.config_manager.get_scan_config()
                except Exception:
                    pass
                try:
                    for symbol in self.watchlist:
                        if not self.is_running or not self._fallback_running:
                            break
                        
                        # Utiliser l'exchange pour obtenir les prix actuels
                        if self.exchange:
                            try:
                                ticker = self.exchange.fetch_ticker(symbol)
                                
                                # Cr√©er des donn√©es compatibles WebSocket
                                fallback_data = {
                                    'symbol': symbol,
                                    'price': ticker['last'],
                                    'volume_24h': ticker.get('quoteVolume', 0),
                                    'change_24h': ticker.get('percentage', 0),
                                    'timestamp': datetime.now()
                                }
                                
                                # Traiter comme des donn√©es temps r√©el
                                self._process_realtime_data(symbol, fallback_data)
                                
                                # Notifier les callbacks GUI
                                for callback in self.callbacks['price_update']:
                                    try:
                                        callback(symbol, fallback_data)
                                    except Exception:
                                        pass
                                
                            except Exception as e:
                                self.log(f"‚ùå Erreur r√©cup√©ration ticker {symbol}: {e}")
                    
                    # Attendre 5 secondes avant la prochaine mise √† jour
                    import time
                    time.sleep(5)
                    
                except Exception as e:
                    self.log(f"‚ùå Erreur syst√®me fallback: {e}")
                    import time
                    time.sleep(10)
        
        import threading
        fallback_thread = threading.Thread(target=fallback_price_generator, daemon=True, name="PriceFallbackSystem")
        fallback_thread.start()
        self.log("‚úÖ Syst√®me de fallback prix activ√© - Trading peut continuer")
    
    def _calculate_slippage(self, symbol: str, expected_price: float, executed_price: float) -> float:
        """Calcule le slippage r√©el d'un trade"""
        if expected_price <= 0:
            return 0.0
        
        slippage_percent = ((executed_price - expected_price) / expected_price) * 100
        return slippage_percent
    
    def _log_slippage(self, symbol: str, trade_type: str, expected_price: float, executed_price: float):
        """Log le slippage d'un trade"""
        if not self.enable_slippage_tracking:
            return
        
        slippage = self._calculate_slippage(symbol, expected_price, executed_price)
        
        # Enregistrer dans l'historique
        slippage_entry = {
            'symbol': symbol,
            'trade_type': trade_type,
            'expected_price': expected_price,
            'executed_price': executed_price,
            'slippage_percent': slippage,
            'timestamp': datetime.now()
        }
        
        self.slippage_history.append(slippage_entry)
        
        # Garder seulement les 100 derniers enregistrements
        if len(self.slippage_history) > 100:
            self.slippage_history.pop(0)
        
        # Log d√©taill√©
        direction = "d√©favorable" if abs(slippage) > self.max_acceptable_slippage else "acceptable"
        self.log(f"üìä SLIPPAGE {symbol} ({trade_type}): {slippage:.3f}% - {direction}")
        self.log(f"   Prix attendu: ${expected_price:.6f} | Prix ex√©cut√©: ${executed_price:.6f}")
        
        # Alerte si slippage trop √©lev√©
        if abs(slippage) > self.max_acceptable_slippage:
            self.log(f"‚ö†Ô∏è SLIPPAGE √âLEV√â {symbol}: {slippage:.3f}% > {self.max_acceptable_slippage}%")
    
    def get_slippage_stats(self) -> Dict:
        """Retourne les statistiques de slippage"""
        if not self.slippage_history:
            return {"count": 0, "average": 0.0, "max": 0.0, "min": 0.0}
        
        slippages = [entry['slippage_percent'] for entry in self.slippage_history]
        
        return {
            "count": len(slippages),
            "average": sum(slippages) / len(slippages),
            "max": max(slippages),
            "min": min(slippages),
            "recent_trades": self.slippage_history[-10:]  # 10 derniers trades
        }
    
    def load_portfolio_state(self):
        """Charge l'√©tat du portefeuille depuis le fichier JSON"""
        try:
            import json
            import os
            
            if os.path.exists(self.portfolio_file):
                with open(self.portfolio_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # Restaurer les donn√©es
                self.simulated_balance = data.get('balance', self.initial_balance)
                self.balance = self.simulated_balance
                self.total_pnl = data.get('total_pnl', 0.0)
                self.total_trades = data.get('total_trades', 0)
                self.winning_trades = data.get('winning_trades', 0)
                self.total_fees = data.get('total_fees', 0.0)  # NOUVEAU: Restaurer frais totaux
                self.closed_trades = data.get('closed_trades', [])
                
                # Restaurer les positions ouvertes
                saved_positions = data.get('open_positions', [])
                self.open_positions = []
                
                for pos in saved_positions:
                    # Convertir les timestamps en datetime
                    if 'timestamp' in pos:
                        pos['timestamp'] = datetime.fromisoformat(pos['timestamp'])
                    if 'entry_time' in pos:
                        pos['entry_time'] = datetime.fromisoformat(pos['entry_time'])
                    if 'last_significant_move' in pos:
                        pos['last_significant_move'] = datetime.fromisoformat(pos['last_significant_move'])
                    
                    self.open_positions.append(pos)
                
                last_updated = data.get('last_updated', 'Unknown')
                self.log(f"üìÇ Portefeuille restaur√© depuis {last_updated}")
                self.log(f"üí∞ Balance: {self.balance:.2f}‚Ç¨")
                self.log(f"üìä Positions ouvertes: {len(self.open_positions)}")
                self.log(f"üìà P&L total: {self.total_pnl:+.2f}‚Ç¨")
                self.log(f"üéØ Trades totaux: {self.total_trades}")
                
                # Red√©marrer la surveillance des positions ouvertes
                for position in self.open_positions:
                    if position.get('status') == 'open':
                        # NOUVEAU SYST√àME : V√©rifier le type de surveillance √† utiliser
                        system_type = position.get('system_type', 'LEGACY')
                        if system_type == 'SIMPLE_STOP_TAKE_PROFIT':
                            # Nouveau syst√®me simplifi√©
                            threading.Thread(target=self._monitor_position_simple, args=[position], daemon=True).start()
                        elif self.config_manager.get('TRAILING_STOP_ENABLED', False):
                            # Ancienne surveillance 3 couches (compatibilit√©)
                            threading.Thread(target=self._monitor_position_3_layers, args=[position], daemon=True).start()
                        # Sinon, pas de surveillance automatique (positions h√©rit√©es)
                        
            else:
                self.log(f"üìÇ Nouveau portefeuille cr√©√© - Balance initiale: {self.balance:.2f}‚Ç¨")
                self.save_portfolio_state()
                
        except Exception as e:
            self.log(f"‚ùå Erreur chargement portefeuille: {e}")
            self.log("üìÇ Utilisation des valeurs par d√©faut")
    
    def save_portfolio_state(self):
        """Sauvegarde l'√©tat du portefeuille dans le fichier JSON"""
        try:
            import json
            from datetime import datetime
            
            def convert_datetime_to_string(obj):
                """Convertit r√©cursivement tous les datetime en string"""
                if isinstance(obj, datetime):
                    return obj.isoformat()
                elif isinstance(obj, dict):
                    return {k: convert_datetime_to_string(v) for k, v in obj.items()}
                elif isinstance(obj, list):
                    return [convert_datetime_to_string(item) for item in obj]
                else:
                    return obj
            
            # Pr√©parer les positions pour la sauvegarde
            positions_to_save = []
            for pos in self.open_positions:
                pos_copy = pos.copy()
                # Conversion r√©cursive de tous les datetime
                pos_copy = convert_datetime_to_string(pos_copy)
                positions_to_save.append(pos_copy)
            
            # Pr√©parer les trades ferm√©s pour la sauvegarde
            closed_trades_to_save = []
            for trade in self.closed_trades[-100:]:  # Garder les 100 derniers trades
                trade_copy = trade.copy()
                # Conversion r√©cursive de tous les datetime
                trade_copy = convert_datetime_to_string(trade_copy)
                closed_trades_to_save.append(trade_copy)
            
            # Donn√©es √† sauvegarder
            portfolio_data = {
                'balance': self.balance,
                'simulated_balance': self.simulated_balance,
                'open_positions': positions_to_save,
                'closed_trades': closed_trades_to_save,
                'total_pnl': self.total_pnl,
                'total_trades': self.total_trades,
                'winning_trades': self.winning_trades,
                'total_fees': self.total_fees,  # NOUVEAU: Sauvegarder frais totaux
                'last_updated': datetime.now().isoformat(),
                'initial_balance': self.initial_balance,
                'position_size_usdt': self.position_size_usdt
            }
            
            # Sauvegarde atomique (fichier temporaire puis renommage)
            temp_file = self.portfolio_file + '.tmp'
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(portfolio_data, f, indent=2, ensure_ascii=False)
            
            # Renommer le fichier temporaire
            import os
            os.replace(temp_file, self.portfolio_file)
            
            self.last_save_time = datetime.now()
            
        except Exception as e:
            self.log(f"‚ùå Erreur sauvegarde portefeuille: {e}")
    
    def _auto_save_portfolio(self):
        """Sauvegarde automatique du portefeuille toutes les 30 secondes"""
        while self.is_running:
            # Reload configuration for real-time changes
            try:
                self.config_manager.load_config()
                self.scan_config = self.config_manager.get_scan_config()
            except Exception:
                pass
            try:
                # Sauvegarder toutes les 30 secondes
                time.sleep(30)
                if self.is_running:
                    self.save_portfolio_state()
                    
            except Exception as e:
                self.log(f"‚ùå Erreur sauvegarde automatique: {e}")
                time.sleep(30)
    
    def _monitor_position_3_layers(self, position: Dict):
        """Surveille une position avec le syst√®me de s√©curit√© √† 3 couches"""
        try:
            symbol = position['symbol']
            entry_price = position['price']
            entry_time = position['entry_time']
            
            self.log(f"üîí D√©marrage surveillance 3 couches pour {symbol}")
            
            while position['status'] == 'open' and self.is_running:
                try:
                    # Obtenir le prix actuel
                    current_price = self._get_current_price(symbol)
                    if current_price is None:
                        time.sleep(1)
                        continue
                    
                    # Calculer la performance depuis l'entr√©e
                    price_change_percent = ((current_price - entry_price) / entry_price) * 100
                    
                    # Mettre √† jour le prix le plus haut si n√©cessaire
                    if current_price > position['highest_price']:
                        position['highest_price'] = current_price
                        position['last_significant_move'] = datetime.now()
                        
                        # V√©rifier si on doit activer le trailing stop
                        if not position['trailing_activated'] and price_change_percent >= self.trailing_activation_percent:
                            position['trailing_activated'] = True
                            self.log(f"üìà {symbol}: Trailing stop ACTIV√â √† +{price_change_percent:.2f}% (seuil: {self.trailing_activation_percent}%)")
                    
                    # === COUCHE 1: TRAILING STOP ===
                    if position['trailing_activated']:
                        highest_price = position['highest_price']
                        drop_from_high = ((highest_price - current_price) / highest_price) * 100
                        
                        if drop_from_high >= self.trailing_stop_percent:
                            self.log(f"üéØ {symbol}: TRAILING STOP d√©clench√© (-{drop_from_high:.2f}% depuis le plus haut)")
                            self._close_position_with_reason(position, current_price, "TRAILING_STOP")
                            break
                    
                    # === COUCHE 2: TIMEOUT ===
                    time_since_entry = (datetime.now() - entry_time).total_seconds()
                    time_since_last_move = (datetime.now() - position['last_significant_move']).total_seconds()
                    
                    if time_since_last_move >= self.timeout_exit_seconds:
                        self.log(f"‚è±Ô∏è {symbol}: TIMEOUT d√©clench√© ({time_since_last_move:.0f}s sans hausse)")
                        self._close_position_with_reason(position, current_price, "TIMEOUT")
                        break
                    
                    # === COUCHE 3: STOP LOSS ===
                    if price_change_percent <= -self.stop_loss_percent:
                        self.log(f"üõë {symbol}: STOP LOSS d√©clench√© ({price_change_percent:.2f}% ‚â§ -{self.stop_loss_percent}%)")
                        self._close_position_with_reason(position, current_price, "STOP_LOSS")
                        break
                    
                    # Log de progression (toutes les 5 secondes)
                    if int(time.time()) % 5 == 0:
                        status = "üü¢ TRAILING ON" if position['trailing_activated'] else "üü° WATCHING"
                        self.log(f"üìä {symbol}: {price_change_percent:+.2f}% | Plus haut: {position['highest_price']:.6f} | {status}")
                    
                    # Attendre 1 seconde avant la prochaine v√©rification
                    time.sleep(1)
                    
                except Exception as e:
                    self.log(f"‚ùå Erreur surveillance {symbol}: {e}")
                    time.sleep(1)
                    
        except Exception as e:
            self.log(f"‚ùå Erreur syst√®me surveillance {symbol}: {e}")
    
    def _monitor_position_simple(self, position: Dict):
        """Surveillance INTELLIGENTE avec tracking momentum - Ne vend QUE quand n√©cessaire"""
        try:
            symbol = position['symbol']
            entry_price = position['entry_price']
            stop_loss = position['stop_loss']
            take_profit = position['take_profit']
            direction = position['direction']
            
            # Configuration surveillance intelligente
            intelligent_tracking = self.config_manager.get('INTELLIGENT_MOMENTUM_TRACKING', True)
            momentum_check_interval = self.config_manager.get('MOMENTUM_CHECK_INTERVAL', 3)
            stagnation_threshold = self.config_manager.get('MOMENTUM_STAGNATION_THRESHOLD', 0.05)
            decline_threshold = self.config_manager.get('MOMENTUM_DECLINE_THRESHOLD', -0.1)
            max_tp_extension = self.config_manager.get('MAX_TP_EXTENSION_PERCENT', 2.0)
            min_samples = self.config_manager.get('MIN_MOMENTUM_SAMPLES', 5)
            strong_momentum = self.config_manager.get('STRONG_MOMENTUM_THRESHOLD', 0.3)
            weak_momentum = self.config_manager.get('WEAK_MOMENTUM_THRESHOLD', 0.1)
            
            # Historique des prix pour calcul momentum
            price_history = []
            tp_reached_time = None
            extended_tp = take_profit  # TP peut √™tre √©tendu si momentum fort
            
            self.log(f"üß† SURVEILLANCE INTELLIGENTE: {symbol}")
            self.log(f"   üéØ TP initial: {take_profit:.6f} | Extension max: +{max_tp_extension}%")
            
            while position['status'] == 'open' and self.is_running:
                try:
                    current_price = self._get_current_price(symbol)
                    if current_price is None:
                        time.sleep(2)
                        continue
                    
                    # Ajouter prix √† l'historique
                    price_history.append({
                        'price': current_price,
                        'timestamp': datetime.now()
                    })
                    
                    # Garder seulement les N derniers √©chantillons
                    if len(price_history) > min_samples * 2:
                        price_history = price_history[-min_samples * 2:]
                    
                    price_change_percent = ((current_price - entry_price) / entry_price) * 100
                    
                    # R√àGLE 1: VENTE IMM√âDIATE sur CHUTE SIGNIFICATIVE (nouvelle r√®gle prioritaire)
                    immediate_exit_threshold = self.config_manager.get('IMMEDIATE_EXIT_THRESHOLD', -0.8)  # -0.8% par d√©faut
                    if isinstance(immediate_exit_threshold, str):
                        immediate_exit_threshold = float(immediate_exit_threshold)
                    
                    if price_change_percent <= immediate_exit_threshold:
                        self.log(f"üö® {symbol}: VENTE IMM√âDIATE - Chute significative ({price_change_percent:+.2f}%) !")
                        self._close_position_with_reason(position, current_price, "IMMEDIATE_EXIT")
                        return
                    
                    # R√àGLE 2: STOP LOSS traditionnel (si pas encore vendu)
                    if current_price <= stop_loss:
                        self.log(f"üõë {symbol}: STOP LOSS d√©clench√© √† {current_price:.6f} (-{abs(price_change_percent):.2f}%)")
                        self._close_position_with_reason(position, current_price, "STOP_LOSS")
                        return
                    
                    # R√àGLE 2: CALCUL MOMENTUM (si assez d'√©chantillons)
                    momentum_percent = 0
                    momentum_trend = "NEUTRE"
                    
                    if len(price_history) >= min_samples:
                        # Calculer momentum sur les N derniers points
                        recent_prices = [p['price'] for p in price_history[-min_samples:]]
                        oldest_price = recent_prices[0]
                        momentum_percent = ((current_price - oldest_price) / oldest_price) * 100
                        
                        # D√©terminer la tendance
                        if momentum_percent > strong_momentum:
                            momentum_trend = "FORTE HAUSSE üöÄ"
                        elif momentum_percent > weak_momentum:
                            momentum_trend = "HAUSSE üìà"
                        elif momentum_percent > decline_threshold:
                            momentum_trend = "STAGNATION üòê"
                        else:
                            momentum_trend = "BAISSE üìâ"
                    
                    # R√àGLE 3: GESTION TAKE PROFIT INTELLIGENT
                    if current_price >= take_profit:
                        if tp_reached_time is None:
                            tp_reached_time = datetime.now()
                            self.log(f"üéØ {symbol}: Take Profit initial atteint ! Surveillance momentum activ√©e")
                        
                        if intelligent_tracking and len(price_history) >= min_samples:
                            # Si momentum encore tr√®s positif, √©tendre le TP
                            if momentum_percent > strong_momentum and momentum_trend == "FORTE HAUSSE üöÄ":
                                # Calculer nouveau TP √©tendu
                                extension_factor = min(1 + (max_tp_extension / 100), 1.05)  # Max +5%
                                new_extended_tp = entry_price * (1 + (((take_profit / entry_price) - 1) * extension_factor))
                                
                                if new_extended_tp > extended_tp:
                                    extended_tp = new_extended_tp
                                    self.log(f"üöÄ {symbol}: TP √âTENDU √† {extended_tp:.6f} (momentum: +{momentum_percent:.2f}%)")
                            
                            # Vendre si momentum faiblit ou devient n√©gatif
                            elif momentum_percent < stagnation_threshold:
                                self.log(f"üí∞ {symbol}: VENTE - TP atteint + momentum faible ({momentum_trend})")
                                self.log(f"   Prix: {current_price:.6f} | Momentum: {momentum_percent:+.2f}%")
                                self._close_position_with_reason(position, current_price, "TAKE_PROFIT_INTELLIGENT")
                                return
                        else:
                            # Mode classique si pas assez d'√©chantillons
                            self.log(f"üéâ {symbol}: TAKE PROFIT classique atteint √† {current_price:.6f}")
                            self._close_position_with_reason(position, current_price, "TAKE_PROFIT")
                            return
                    
                    # R√àGLE 4: VENTE SI MOMENTUM DEVIENT N√âGATIF (m√™me sans atteindre TP)
                    if intelligent_tracking and len(price_history) >= min_samples:
                        if momentum_percent < decline_threshold and price_change_percent > 0.2:
                            # On √©tait en profit mais momentum devient n√©gatif
                            self.log(f"‚ö†Ô∏è {symbol}: VENTE pr√©ventive - Momentum n√©gatif d√©tect√©")
                            self.log(f"   Prix: {current_price:.6f} | Momentum: {momentum_percent:+.2f}% | Profit: {price_change_percent:+.2f}%")
                            self._close_position_with_reason(position, current_price, "MOMENTUM_DECLINE")
                            return
                    
                    # R√àGLE 5: TIMEOUT INTELLIGENT bas√© sur le mouvement du prix
                    time_elapsed = (datetime.now() - position['entry_time']).total_seconds()
                    
                    # Crit√®res intelligents au lieu d'un timeout fixe
                    price_change_abs = abs(price_change_percent)
                    
                    # CRIT√àRE 1: Si √ßa bouge peu ET c'est long ‚Üí Fermer (position stagnante)
                    stagnation_timeout = self.config_manager.get('STAGNATION_TIMEOUT_SECONDS', 600)  # 10 min
                    stagnation_threshold = self.config_manager.get('STAGNATION_PRICE_THRESHOLD', 0.1)  # 0.1%
                    
                    if time_elapsed > stagnation_timeout and price_change_abs < stagnation_threshold:
                        self.log(f"‚è∞ {symbol}: Position STAGNANTE ({price_change_abs:.2f}% en {time_elapsed:.0f}s) - Fermeture")
                        self._close_position_with_reason(position, current_price, "STAGNATION_TIMEOUT")
                        return
                    
                    # CRIT√àRE 2: Si √ßa bouge dans le mauvais sens ET c'est long ‚Üí Fermer plus vite
                    negative_timeout = self.config_manager.get('NEGATIVE_TIMEOUT_SECONDS', 300)  # 5 min
                    if time_elapsed > negative_timeout and price_change_percent < -0.2:
                        self.log(f"‚è∞ {symbol}: Position N√âGATIVE ({price_change_percent:+.2f}% en {time_elapsed:.0f}s) - Fermeture")
                        self._close_position_with_reason(position, current_price, "NEGATIVE_TIMEOUT")
                        return
                    
                    # CRIT√àRE 3: Timeout de s√©curit√© absolue (tr√®s long si √ßa bouge bien)
                    max_absolute_timeout = self.config_manager.get('MAX_ABSOLUTE_TIMEOUT_SECONDS', 1800)  # 30 min max
                    if time_elapsed > max_absolute_timeout:
                        self.log(f"‚è∞ {symbol}: TIMEOUT ABSOLU ({time_elapsed:.0f}s) - Fermeture forc√©e")
                        self._close_position_with_reason(position, current_price, "ABSOLUTE_TIMEOUT")
                        return
                    
                    # Log p√©riodique avec momentum
                    if int(time_elapsed) % 15 == 0:  # Toutes les 15s
                        self.log(f"üß† {symbol}: {price_change_percent:+.2f}% | Momentum: {momentum_trend} ({momentum_percent:+.2f}%)")
                        if extended_tp > take_profit:
                            self.log(f"   üéØ TP √©tendu: {extended_tp:.6f} (original: {take_profit:.6f})")
                    
                    time.sleep(momentum_check_interval)  # Check toutes les 3 secondes
                    
                except Exception as e:
                    self.log(f"‚ùå Erreur surveillance {symbol}: {e}")
                    time.sleep(5)
                    
        except Exception as e:
            self.log(f"‚ùå Erreur critique surveillance {symbol}: {e}")
    
    def _get_current_price(self, symbol: str) -> Optional[float]:
        """Obtient le prix actuel d'un symbole"""
        try:
            if self.exchange:
                ticker = self.exchange.fetch_ticker(symbol)
                return ticker.get('last', 0)
            return None
        except Exception:
            return None
    
    def _close_position_with_reason(self, position: Dict, exit_price: float, reason: str):
        """Ferme une position avec une raison sp√©cifique"""
        try:
            # Calculer le slippage si activ√©
            if self.enable_slippage_tracking:
                expected_price = position['price']
                self._log_slippage(position['symbol'], "SELL", expected_price, exit_price)
            
            # Fermer la position
            position['exit_reason'] = reason
            position['exit_price'] = exit_price
            position['exit_time'] = datetime.now()
            
            # Utiliser la m√©thode existante de fermeture
            self._close_position_scalping(position, exit_price)
            
            # Log d√©taill√© selon la raison
            if reason == "TRAILING_STOP":
                self.log(f"‚úÖ {position['symbol']}: Position ferm√©e par TRAILING STOP")
            elif reason == "TIMEOUT":
                self.log(f"‚è∞ {position['symbol']}: Position ferm√©e par TIMEOUT")
            elif reason == "TIMEOUT_SECURITY":
                self.log(f"‚è∞ {position['symbol']}: Position ferm√©e par TIMEOUT DE S√âCURIT√â")
            elif reason == "STOP_LOSS":
                self.log(f"üõë {position['symbol']}: Position ferm√©e par STOP LOSS")
            elif reason == "TAKE_PROFIT":
                self.log(f"üéâ {position['symbol']}: Position ferm√©e par TAKE PROFIT")
            elif reason == "TAKE_PROFIT_INTELLIGENT":
                self.log(f"üß† {position['symbol']}: Position ferm√©e par TAKE PROFIT INTELLIGENT")
            elif reason == "MOMENTUM_DECLINE":
                self.log(f"‚ö†Ô∏è {position['symbol']}: Position ferm√©e par D√âCLIN DE MOMENTUM")
            else:
                self.log(f"‚úÖ {position['symbol']}: Position ferm√©e ({reason})")
                
        except Exception as e:
            self.log(f"‚ùå Erreur fermeture position {position['symbol']}: {e}")
    
    def _stop_price_fallback_system(self):
        """Arr√™te le syst√®me de fallback quand WebSocket est reconnect√©"""
        if hasattr(self, '_fallback_running'):
            self._fallback_running = False
            self.log("üõë Syst√®me de fallback d√©sactiv√© - WebSocket reconnect√©")
    
    def _start_websocket_health_monitor(self):
        """D√©marre le monitoring de sant√© du WebSocket"""
        def health_monitor():
            while self.is_running and self.websocket_manager:
                # Reload configuration for real-time changes
                try:
                    self.config_manager.load_config()
                    self.scan_config = self.config_manager.get_scan_config()
                except Exception:
                    pass
                try:
                    # V√©rifier selon configuration
                    check_interval = self.config_manager.get('SCAN_INTERVAL_MINUTES', 1) * 60
                    time.sleep(check_interval)
                    
                    if not self.websocket_manager:
                        break
                    
                    health = self.websocket_manager.get_connection_health()
                    
                    if not health['is_connected'] and health['should_reconnect']:
                        self.log(f"‚ö†Ô∏è WebSocket d√©connect√© depuis {health.get('reconnect_attempts', 0)} tentatives")
                        
                        # Si trop de tentatives √©chou√©es, forcer un red√©marrage complet
                        if health.get('reconnect_attempts', 0) >= 5:
                            self.log("üîÑ Red√©marrage complet WebSocket apr√®s √©checs multiples")
                            try:
                                self.websocket_manager.stop_all_streams()
                                time.sleep(5)
                                self.websocket_manager.start_price_streams(self.watchlist)
                            except Exception as e:
                                self.log(f"‚ùå Erreur red√©marrage complet WebSocket: {e}")
                    
                    elif health['is_connected']:
                        # Log de sant√© p√©riodique
                        msg_count = health.get('messages_received', 0)
                        if msg_count > 0:
                            self.log(f"üíö WebSocket sain: {msg_count} messages, {health.get('symbols_tracked', 0)} symboles")
                
                except Exception as e:
                    self.log(f"‚ùå Erreur monitoring sant√© WebSocket: {e}")
                    break
        
        import threading
        health_thread = threading.Thread(target=health_monitor, daemon=True, name="WebSocketHealthMonitor")
        health_thread.start()
    
    def _process_realtime_data(self, symbol: str, data: Dict):
        """Traite les donn√©es temps r√©el - G√âN√àRE DES TRADES avec vraies donn√©es"""
        try:
            # Les donn√©es arrivent directement du WebSocket callback
            current_price = data.get('current_price', 0)
            volume_24h = data.get('volume_24h', 0)
            change_24h = data.get('change_24h', 0)
            
            if not current_price or current_price <= 0:
                print(f"‚ö†Ô∏è {symbol}: Prix invalide ({current_price}) - ANALYSE IGNOR√âE")
                return
            
            print(f"üìä {symbol}: Prix=${current_price:.10f}, Vol={volume_24h/1000000:.1f}M, Change={change_24h:+.2f}%")
            
            # G√âN√âRER SIGNAL DE TRADING bas√© sur momentum
            signal = 'HOLD'
            
            # Crit√®res simples pour g√©n√©rer des trades - LOGIQUE SCALPING CORRIG√âE
            # CORRIG√â: Acheter quand √ßa MONTE, pas quand √ßa descend !
            # Utiliser les seuils du config.txt au lieu de valeurs cod√©es en dur
            pump_min_threshold = self.config_manager.get('pump_min_3min', 0.5)  # 0.5% par d√©faut
            pump_max_threshold = self.config_manager.get('pump_max_3min', 3.0)  # 3.0% par d√©faut
            
            # Convertir en float si n√©cessaire
            if isinstance(pump_min_threshold, str):
                pump_min_threshold = float(pump_min_threshold)
            if isinstance(pump_max_threshold, str):
                pump_max_threshold = float(pump_max_threshold)
            
            if pump_min_threshold <= change_24h <= pump_max_threshold:  # Entre 0.5% et 3.0% = signal d'achat optimal
                signal = 'BUY'
            elif change_24h < -pump_min_threshold:  # Moins de -0.5% = signal de vente (√©viter la chute)  
                signal = 'SELL'
            
            # NOUVELLE LOGIQUE : ENTRER UNIQUEMENT SUR SIGNAL BUY
            if signal == 'BUY':
                print(f"‚úÖ {symbol}: Signal BUY g√©n√©r√© (Change: {change_24h:+.2f}%) - ENTR√âE EN POSITION")
                
                # SIMULATION de trading avec vraies donn√©es
                if self.simulation_mode:
                    self._execute_simulated_trade(symbol, {
                        'signal': signal,
                        'current_price': current_price,
                        'change_24h': change_24h,
                        'volume_24h': volume_24h,
                        'confidence': 0.7
                    })
                else:
                    self._execute_real_trade(symbol, {
                        'signal': signal,
                        'current_price': current_price,
                        'change_24h': change_24h,
                        'volume_24h': volume_24h,
                        'confidence': 0.7
                    })
            elif signal == 'SELL':
                print(f"‚ÑπÔ∏è {symbol}: Signal SELL d√©tect√© (Change: {change_24h:+.2f}%) - IGNOR√â (on ne trade que les BUY)")
                return  # Ignorer les signaux SELL
                    
        except Exception as e:
            print(f"‚ùå Erreur traitement {symbol}: {e}")
            return
    
    def _calculate_dynamic_take_profit(self, symbol: str, signal_data: Dict) -> float:
        """Calcule le Take Profit dynamique selon le potentiel de hausse"""
        try:
            # V√©rifier si le mode dynamique est activ√©
            if not self.config_manager.get('DYNAMIC_TAKE_PROFIT', True):
                return self.config_manager.get('take_profit_percent', 1.5)
            
            current_price = signal_data.get('current_price', 0)
            change_24h = signal_data.get('change_24h', 0)
            volume_24h = signal_data.get('volume_24h', 0)
            
            # === 1. ANALYSE RSI (estimation bas√©e sur change_24h) ===
            # Estimation RSI : Plus le change est n√©gatif, plus le RSI est bas
            estimated_rsi = 50 + (change_24h * 2)
            if estimated_rsi < 0: estimated_rsi = 0
            if estimated_rsi > 100: estimated_rsi = 100
            
            rsi_very_low_threshold = self.config_manager.get('RSI_VERY_LOW_THRESHOLD', 25)
            rsi_medium_threshold = self.config_manager.get('RSI_MEDIUM_THRESHOLD', 40)
            
            if estimated_rsi < rsi_very_low_threshold:
                rsi_tp = self.config_manager.get('TP_RSI_VERY_LOW', 2.5)
                rsi_strength = "TR√àS BAS"
            elif estimated_rsi < rsi_medium_threshold:
                rsi_tp = self.config_manager.get('TP_RSI_MEDIUM', 1.5)
                rsi_strength = "MOYEN"
            else:
                rsi_tp = self.config_manager.get('TP_RSI_LIMIT', 1.0)
                rsi_strength = "LIMITE"
            
            # === 2. ANALYSE VOLUME SPIKE ===
            # Estimation volume ratio bas√©e sur les donn√©es
            volume_ratio = min(150 + (abs(change_24h) * 20), 400)  # Estimation
            
            volume_high_threshold = self.config_manager.get('VOLUME_SPIKE_HIGH_THRESHOLD', 200)
            volume_medium_threshold = self.config_manager.get('VOLUME_SPIKE_MEDIUM_THRESHOLD', 130)
            
            if volume_ratio > volume_high_threshold:
                volume_tp = self.config_manager.get('TP_VOLUME_SPIKE_HIGH', 3.0)
                volume_strength = "√âNORME"
            elif volume_ratio > volume_medium_threshold:
                volume_tp = self.config_manager.get('TP_VOLUME_SPIKE_MEDIUM', 2.0)
                volume_strength = "FORT"
            else:
                volume_tp = self.config_manager.get('TP_VOLUME_SPIKE_LOW', 1.5)
                volume_strength = "NORMAL"
            
            # === 3. ANALYSE PUMP 3MIN ===
            pump_3min = abs(change_24h)  # Utiliser change_24h comme proxy
            
            pump_strong_threshold = self.config_manager.get('PUMP_STRONG_THRESHOLD', 2.0)
            pump_medium_threshold = self.config_manager.get('PUMP_MEDIUM_THRESHOLD', 1.0)
            
            if pump_3min > pump_strong_threshold:
                pump_tp = self.config_manager.get('TP_PUMP_STRONG', 2.5)
                pump_strength = "TR√àS FORT"
            elif pump_3min > pump_medium_threshold:
                pump_tp = self.config_manager.get('TP_PUMP_MEDIUM', 1.8)
                pump_strength = "FORT"
            else:
                pump_tp = self.config_manager.get('TP_PUMP_LOW', 1.2)
                pump_strength = "MOD√âR√â"
            
            # === 4. ANALYSE TYPE DE CRYPTO ===
            base_currency = symbol.split('/')[0]
            
            if base_currency in ['BTC', 'ETH']:
                crypto_tp = self.config_manager.get('TP_BTC_ETH', 1.5)
                crypto_type = "STABLE"
            elif base_currency in ['BNB', 'ADA', 'SOL', 'DOT', 'AVAX', 'LINK', 'UNI', 'MATIC', 'ATOM', 'XRP']:
                crypto_tp = self.config_manager.get('TP_TOP_ALTCOINS', 2.0)
                crypto_type = "TOP ALTCOIN"
            else:
                crypto_tp = self.config_manager.get('TP_MICROCAPS', 3.5)
                crypto_type = "MICROCAP"
            
            # === 5. CALCUL TAKE PROFIT FINAL (moyenne pond√©r√©e) ===
            # Pond√©ration : RSI 30%, Volume 25%, Pump 25%, Type 20%
            dynamic_tp = (rsi_tp * 0.30) + (volume_tp * 0.25) + (pump_tp * 0.25) + (crypto_tp * 0.20)
            
            # Limiter entre 1% et 5% pour √©viter les extr√™mes
            dynamic_tp = max(1.0, min(dynamic_tp, 5.0))
            
            # Log d√©taill√© du calcul
            self.log(f"üéØ TP DYNAMIQUE {symbol}:")
            self.log(f"   üìä RSI: {estimated_rsi:.0f} ({rsi_strength}) ‚Üí {rsi_tp:.1f}%")
            self.log(f"   üìà Volume: {volume_ratio:.0f}% ({volume_strength}) ‚Üí {volume_tp:.1f}%")
            self.log(f"   üöÄ Pump: {pump_3min:.1f}% ({pump_strength}) ‚Üí {pump_tp:.1f}%")
            self.log(f"   üíé Type: {crypto_type} ‚Üí {crypto_tp:.1f}%")
            self.log(f"   üéØ TAKE PROFIT FINAL: {dynamic_tp:.1f}%")
            
            return dynamic_tp
            
        except Exception as e:
            self.log(f"‚ùå Erreur calcul TP dynamique {symbol}: {e}")
            # Fallback sur TP fixe
            return self.config_manager.get('take_profit_percent', 1.5)
    
    def _execute_simulated_trade(self, symbol: str, signal_data: Dict):
        """Ex√©cute un trade simul√© avec affichage dans le GUI + gestion positions"""
        try:
            signal = signal_data['signal']
            # === FRAIS BINANCE R√âELS 2025 ===
            # VIP 0 + BNB : Maker 0.075%, Taker 0.075% (IDENTIQUE !)
            # ‚Üí Pas besoin de strat√©gie maker, utiliser prix march√© directement
            
            # Configuration frais selon niveau utilisateur
            use_bnb_discount = self.config_manager.get('USE_BNB_DISCOUNT', True)
            vip_level = self.config_manager.get('BINANCE_VIP_LEVEL', 0)
            
            # Configuration des frais selon niveau VIP (depuis config.txt UNIQUEMENT)
            vip_4_maker_fee = self.config_manager.get('VIP_4_MAKER_FEE')
            vip_4_taker_fee = self.config_manager.get('VIP_4_TAKER_FEE')  
            base_maker_fee = self.config_manager.get('BASE_MAKER_FEE')
            base_taker_fee = self.config_manager.get('BASE_TAKER_FEE')
            bnb_discount_rate = self.config_manager.get('BNB_DISCOUNT_RATE')
            
            if vip_level >= 4:
                # VIP 4+ : Frais diff√©rents maker/taker
                base_maker_fee = vip_4_maker_fee
                base_taker_fee = vip_4_taker_fee
                use_maker_strategy = True  # Avantage √† √™tre maker
            else:
                # VIP 0-3 : Frais identiques avec BNB  
                use_maker_strategy = False  # Pas d'avantage avec BNB
            
            # Appliquer discount BNB si activ√©
            if use_bnb_discount and bnb_discount_rate:
                maker_fee = base_maker_fee * bnb_discount_rate if base_maker_fee else 0.00075
                taker_fee = base_taker_fee * bnb_discount_rate if base_taker_fee else 0.00075
                fee_currency = "BNB"
                # VIP 0 + BNB : maker = taker = 0.075%, donc pas besoin strat√©gie maker
                if vip_level < 4:
                    use_maker_strategy = False
            else:
                maker_fee = base_maker_fee
                taker_fee = base_taker_fee
                fee_currency = "USDT"
                use_maker_strategy = True  # Sans BNB, maker < taker
            
            # === STRAT√âGIE DE PRIX SIMPLIFI√âE ===
            current_price = signal_data['current_price']
            change_24h = signal_data.get('change_24h', 0)
            confidence = signal_data.get('confidence', 0.7)
            
            # Configuration des offsets et prix (depuis config.txt uniquement)
            maker_offset = self.config_manager.get('MAKER_OFFSET_PERCENT')
            stop_loss_buy_multiplier = self.config_manager.get('STOP_LOSS_BUY_MULTIPLIER')
            stop_loss_sell_multiplier = self.config_manager.get('STOP_LOSS_SELL_MULTIPLIER')
            
            if use_maker_strategy:
                # VIP √©lev√© ou sans BNB : utiliser strat√©gie maker
                if signal == 'BUY':
                    entry_price = current_price * (1 - (maker_offset or 0.0001))  # Sous le march√©
                    trading_fees = maker_fee or 0.00075
                    order_type = "MAKER"
                else:
                    entry_price = current_price * (1 + (maker_offset or 0.0001))  # Sur le march√©
                    trading_fees = maker_fee or 0.00075
                    order_type = "MAKER"
            else:
                # VIP 0 + BNB : frais identiques, utiliser prix march√© (taker)
                entry_price = current_price  # Prix de march√© directement
                trading_fees = taker_fee or 0.00075  # 0.075% (= maker_fee)
                order_type = "TAKER"
            
            # Calculs stop loss seulement (take profit supprim√© - syst√®me 3 couches utilis√©)
            # NOUVEAU SYST√àME SIMPLIFI√â : STOP LOSS + TAKE PROFIT FIXE
            stop_loss_buy_multiplier = self.config_manager.get('STOP_LOSS_BUY_MULTIPLIER')
            stop_loss_sell_multiplier = self.config_manager.get('STOP_LOSS_SELL_MULTIPLIER')
            take_profit_buy_multiplier = self.config_manager.get('TAKE_PROFIT_BUY_MULTIPLIER')
            take_profit_sell_multiplier = self.config_manager.get('TAKE_PROFIT_SELL_MULTIPLIER')
            
            # SIMPLIFI√â : TOUJOURS DU LONG (signal BUY uniquement)
            operation = 'ACHAT'
            direction = 'LONG' 
            signal_display = 'BUY'  # Toujours BUY maintenant
            
            # === CALCUL TAKE PROFIT DYNAMIQUE ===
            dynamic_tp_percent = self._calculate_dynamic_take_profit(symbol, signal_data)
            
            # STOP LOSS et TAKE PROFIT pour LONG uniquement
            stop_loss = entry_price * (stop_loss_buy_multiplier or 0.995)    # -0.5% (plus bas)
            take_profit = entry_price * (1 + (dynamic_tp_percent / 100))     # TP dynamique (plus haut)
            
            # Calculer la taille de position selon la strat√©gie OPTIMIS√âE (depuis config.txt UNIQUEMENT)
            max_position_per_crypto = self.config_manager.get('order_size') or self.config_manager.get('POSITION_SIZE_USDT')
            
            # V√©rifier qu'on a assez de capital
            if self.simulation_mode:
                available_balance = self.simulated_balance
            else:
                available_balance = self.balance
            
            # Si balance insuffisante, ne pas trader
            if available_balance < max_position_per_crypto:
                self.log(f"‚ö†Ô∏è {symbol}: Balance insuffisante ({available_balance:.2f}‚Ç¨ < {max_position_per_crypto}‚Ç¨) - TRADE ANNUL√â")
                return
            
            # === CALCUL AVEC FRAIS INCLUS ===
            position_size_usdt = max_position_per_crypto  # 100‚Ç¨ par trade
            entry_fees = position_size_usdt * trading_fees  # Frais d'entr√©e
            net_position_size = position_size_usdt - entry_fees  # Capital r√©el investi
            quantity = net_position_size / entry_price  # Quantit√© ajust√©e aux frais
            
            # NOUVEAU: Ajouter les frais d'entr√©e au total
            self.total_fees += entry_fees
            
            # Calculer stop loss avec prix maker
            # (d√©j√† calcul√© plus haut avec entry_price)
            
            # V√©rifier si on a d√©j√† une position ouverte pour ce symbole
            existing_position = None
            for pos in self.open_positions:
                if pos['symbol'] == symbol and pos['status'] == 'open':
                    existing_position = pos
                    break
            
            # SCALPING: Si position existante, VENDRE automatiquement SEULEMENT si profitable
            if existing_position:
                profit_threshold = self.config_manager.get('MIN_PROFIT_FOR_AUTO_SCALPING', 0.5)  # 0.5% minimum
                price_change_percent = ((current_price - existing_position['price']) / existing_position['price']) * 100
                
                if price_change_percent >= profit_threshold:
                    print(f"üîÑ SCALPING {symbol}: Position profitable (+{price_change_percent:.2f}%) - VENTE AUTOMATIQUE")
                    self._close_position_with_reason(existing_position, current_price, "AUTO_SCALPING_PROFIT")
                    return
                else:
                    print(f"‚è∏Ô∏è SCALPING {symbol}: Position non-profitable ({price_change_percent:+.2f}%) - ATTENTE mouvement")
                    return  # Ne pas cr√©er nouvelle position, attendre
            
            # Cr√©er l'ordre simul√© avec SYST√àME SIMPLIFI√â : Stop Loss + Take Profit Dynamique
            trade_data = {
                'symbol': symbol,
                'side': signal_display,  # Pour affichage (BUY)
                'operation': operation,  # TOUJOURS 'ACHAT'
                'direction': direction,  # TOUJOURS 'LONG'
                'quantity': quantity,
                'price': entry_price,  # Prix maker, pas prix march√©
                'entry_price': entry_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,  # NOUVEAU: Take Profit Dynamique
                'dynamic_tp_percent': dynamic_tp_percent,  # % TP calcul√© dynamiquement
                'timestamp': datetime.now(),
                'entry_time': datetime.now(),
                'direction': direction,
                'value_usdt': position_size_usdt,
                'net_invested': net_position_size,
                'trading_fees': trading_fees,
                'order_type': order_type,
                'status': 'open',
                'entry_momentum': current_price,  # Pour surveillance intelligente
                'change_24h': change_24h,  # Pour affichage du momentum
                'last_check': datetime.now(),
                'system_type': 'SIMPLE_STOP_TAKE_PROFIT',  # Nouveau syst√®me
                'order_id': f"sim_{symbol.replace('/', '')}_{int(time.time())}"
            }
            
            # Ajouter √† la liste des positions ouvertes
            self.open_positions.append(trade_data)
            
            # NOUVEAU: Sauvegarder imm√©diatement apr√®s nouveau trade
            self.save_portfolio_state()
            
            # Mettre √† jour la balance selon le mode  
            if self.simulation_mode:
                # CORRECTION: D√©duire seulement le capital R√âELLEMENT investi (apr√®s frais)
                self.simulated_balance -= net_position_size  # 49.95‚Ç¨ au lieu de 50‚Ç¨
                self.balance = self.simulated_balance
            
            # Affichage d√©taill√© avec nouvelle logique
            print(f"üéÆ TRADE SIMUL√â: {symbol}")
            print(f"   Signal: {signal} ({operation})")
            print(f"   Prix march√©: ${current_price:.10f}")
            
            if use_maker_strategy:
                print(f"   Prix MAKER: ${entry_price:.10f} ({'+' if entry_price > current_price else ''}{((entry_price/current_price-1)*100):+.3f}%)")
                print(f"   Strat√©gie: MAKER (frais maker < taker)")
            else:
                print(f"   Prix TAKER: ${entry_price:.10f} (prix march√© direct)")
                print(f"   Strat√©gie: TAKER (frais maker = taker avec BNB)")
            
            print(f"   Quantit√©: {quantity:.8f}")
            print(f"   Valeur brute: ${position_size_usdt:.2f}")
            print(f"   Frais entr√©e: ${entry_fees:.3f} {fee_currency} ({trading_fees*100:.3f}% {order_type})")
            print(f"   Capital investi: ${net_position_size:.2f}")
            print(f"   VIP Level: {vip_level} | BNB: {'‚úÖ' if use_bnb_discount else '‚ùå'} | Type: {order_type}")
            print(f"   Stop Loss: ${stop_loss:.10f}")
            print(f"   Take Profit: ${take_profit:.10f}")
            print(f"   Balance: ${self.simulated_balance:.2f}")
            print(f"   üéØ NOUVEAU SYST√àME: Stop Loss + Take Profit + Surveillance intelligente")
            
            # D√âMARRER LE NOUVEAU SYST√àME DE SURVEILLANCE SIMPLIFI√â
            threading.Thread(target=self._monitor_position_simple, args=[trade_data], daemon=True).start()
            
            # Notifier le GUI
            for callback in self.callbacks.get('trade_executed', []):
                try:
                    callback(trade_data)
                except Exception:
                    pass
                    
            # Notifier balance
            for callback in self.callbacks.get('balance_update', []):
                try:
                    callback(self.simulated_balance, len(self.open_positions))
                except Exception:
                    pass
                    
        except Exception as e:
            print(f"‚ùå Erreur trade simul√© {symbol}: {e}")
    
    def _close_position_scalping(self, position: Dict, exit_price: float):
        """Ferme une position scalping avec calcul P&L incluant les frais"""
        try:
            # S'assurer que exit_time est d√©fini si pas encore fait
            if 'exit_time' not in position:
                position['exit_time'] = datetime.now()
            
            # S'assurer que exit_reason est d√©fini avec une valeur par d√©faut
            if 'exit_reason' not in position:
                position['exit_reason'] = 'MANUAL_CLOSE'
                
            entry_price = position['price']
            quantity = position['quantity']
            position_value = position['value_usdt']  # 200‚Ç¨ initial
            # Calculer frais d'entr√©e avec taux depuis config.txt UNIQUEMENT
            default_trading_fees = self.config_manager.get('DEFAULT_TRADING_FEES')
            entry_fees = position.get('entry_fees', position_value * (default_trading_fees or 0.001))
            trading_fees = position.get('trading_fees', default_trading_fees or 0.001)
            
            # === STRAT√âGIE DE SORTIE COH√âRENTE ===
            # Utiliser la m√™me logique que l'entr√©e
            use_maker_strategy = position.get('use_maker_strategy', False)
            order_type = position.get('order_type', 'TAKER')
            
            if use_maker_strategy:
                # Strat√©gie maker : d√©caler le prix
                maker_offset = 0.0001  # 0.01% de d√©calage
                if position['direction'] == 'LONG':
                    # Vente LONG : offre de vente SUR le march√© (maker)
                    actual_exit_price = exit_price * (1 + maker_offset)
                else:
                    # Achat SHORT : offre d'achat SOUS le march√© (maker)  
                    actual_exit_price = exit_price * (1 - maker_offset)
                exit_order_type = "MAKER"
            else:
                # Strat√©gie taker : prix march√© direct (VIP 0 + BNB)
                actual_exit_price = exit_price  # Prix march√©
                exit_order_type = "TAKER"
            
            # Calculer valeur brute de sortie
            gross_exit_value = quantity * actual_exit_price
            
            # Calculer frais de sortie (m√™me taux que l'entr√©e)
            exit_fees = gross_exit_value * trading_fees
            
            # NOUVEAU: Ajouter les frais de sortie au total
            self.total_fees += exit_fees
            
            # Valeur nette apr√®s frais de sortie
            net_exit_value = gross_exit_value - exit_fees
            
            # Calculer P&L net (apr√®s tous les frais)
            net_invested = position_value - entry_fees  # Capital r√©ellement investi
            net_pnl = net_exit_value - net_invested  # P&L net apr√®s frais
            pnl_percent = (net_pnl / net_invested) * 100
            
            # CORRECTION: Total rendu = capital investi r√©el + P&L net
            # On r√©cup√®re ce qu'on a r√©ellement investi + les gains/pertes
            total_return = net_invested + net_pnl  # 49.95‚Ç¨ + P&L au lieu de 50‚Ç¨ + P&L
            
            # Mettre √† jour la balance selon le mode
            if self.simulation_mode:
                self.simulated_balance += total_return
                self.balance = self.simulated_balance
            
            # Marquer la position comme ferm√©e
            position['status'] = 'closed'
            position['exit_price'] = actual_exit_price
            position['exit_fees'] = exit_fees
            position['net_pnl'] = net_pnl
            position['pnl_percent'] = pnl_percent
            position['total_fees'] = entry_fees + exit_fees
            
            # Ajouter √† l'historique des trades ferm√©s
            closed_trade = position.copy()
            # Convertir les datetime en string AVANT d'ajouter √† l'historique
            if 'timestamp' in closed_trade and hasattr(closed_trade['timestamp'], 'isoformat'):
                closed_trade['timestamp'] = closed_trade['timestamp'].isoformat()
            if 'entry_time' in closed_trade and hasattr(closed_trade['entry_time'], 'isoformat'):
                closed_trade['entry_time'] = closed_trade['entry_time'].isoformat()
            if 'last_significant_move' in closed_trade and hasattr(closed_trade['last_significant_move'], 'isoformat'):
                closed_trade['last_significant_move'] = closed_trade['last_significant_move'].isoformat()
            if 'exit_timestamp' in closed_trade and hasattr(closed_trade['exit_timestamp'], 'isoformat'):
                closed_trade['exit_timestamp'] = closed_trade['exit_timestamp'].isoformat()
            
            closed_trade['closed_at'] = datetime.now().isoformat()
            self.closed_trades.append(closed_trade)
            
            # MISE √Ä JOUR du P&L total
            self.total_pnl += net_pnl
            
            # NOUVEAU: Sauvegarder imm√©diatement apr√®s fermeture
            self.save_portfolio_state()
            
            # Affichage d√©taill√© du calcul P&L
            print(f"üí∞ VENTE SCALPING: {position['symbol']}")
            print(f"   === CALCUL P&L D√âTAILL√â ===")
            print(f"   Prix entr√©e: ${entry_price:.10f} ({order_type})")
            print(f"   Prix march√© sortie: ${exit_price:.10f}")
            
            if use_maker_strategy:
                print(f"   Prix MAKER sortie: ${actual_exit_price:.10f} ({'+' if actual_exit_price > exit_price else ''}{((actual_exit_price/exit_price-1)*100):+.3f}%)")
                print(f"   Strat√©gie: MAKER (frais avantageux)")
            else:
                print(f"   Prix TAKER sortie: ${actual_exit_price:.10f} (prix march√©)")
                print(f"   Strat√©gie: TAKER (frais identiques avec BNB)")
            
            print(f"   --- CALCUL D√âTAILL√â ---")
            print(f"   Capital investi: ${net_invested:.2f}")
            print(f"   Valeur brute sortie: ${gross_exit_value:.2f}")
            print(f"   Frais entr√©e: ${entry_fees:.3f} BNB")
            print(f"   Frais sortie: ${exit_fees:.3f} BNB")
            print(f"   Total frais: ${entry_fees + exit_fees:.3f} BNB")
            print(f"   --- R√âSULTAT ---")
            print(f"   GAIN BRUT: ${gross_exit_value - (net_invested + entry_fees):.2f}")
            print(f"   MOINS FRAIS: ${exit_fees:.3f} BNB")
            print(f"   GAIN NET: ${net_pnl:+.2f} ({pnl_percent:+.2f}%)")
            print(f"   Balance: ${self.balance:.2f}")
            
            # Notifier callbacks trade ferm√© (VENTE)
            for callback in self.callbacks.get('trade_executed', []):
                try:
                    callback({
                        **position,
                        'status': 'closed',
                        'operation': 'VENTE',  # Marquer comme vente
                        'exit_price': actual_exit_price,
                        'net_pnl': net_pnl,
                        'pnl_percent': pnl_percent,
                        'side': 'SELL'  # C√¥t√© vente
                    })
                except Exception:
                    pass
            
            # Notifier balance
            for callback in self.callbacks.get('balance_update', []):
                try:
                    callback(self.balance, len([p for p in self.open_positions if p['status'] == 'open']))
                except Exception:
                    pass
                    
        except Exception as e:
            print(f"‚ùå Erreur fermeture position: {e}")
    
    def _auto_close_scalping_position(self, position: Dict):
        """Ferme automatiquement une position apr√®s d√©lai (scalping) avec VRAI prix"""
        if position['status'] == 'open':
            symbol = position['symbol']
            
            # UTILISER LE VRAI PRIX ACTUEL depuis l'API
            try:
                if hasattr(self, 'exchange') and self.exchange:
                    # R√©cup√©rer le VRAI prix current de Binance
                    ticker = self.exchange.fetch_ticker(symbol)
                    current_price = ticker['last']  # Prix r√©el actuel
                    
                    print(f"‚è∞ AUTO-VENTE SCALPING: {symbol} apr√®s 30s")
                    print(f"   Prix entr√©e: ${position['price']:.6f}")
                    print(f"   Prix sortie R√âEL: ${current_price:.6f}")
                    print(f"   Diff√©rence: {((current_price/position['price']-1)*100):+.3f}%")
                    
                else:
                    # Fallback: utiliser donn√©es WebSocket si disponibles
                    current_price = position['price'] * 1.001  # Variation minime r√©aliste
                    print(f"‚ö†Ô∏è Utilisation prix fallback pour {symbol}")
                    
            except Exception as e:
                print(f"‚ùå Erreur r√©cup√©ration prix r√©el {symbol}: {e}")
                # Fallback: petite variation al√©atoire r√©aliste
                import random
                variation = random.uniform(-0.005, 0.005)  # ¬±0.5% al√©atoire
                current_price = position['price'] * (1 + variation)
                print(f"‚ö†Ô∏è Utilisation prix al√©atoire pour {symbol}: {variation*100:+.2f}%")
            
            self._close_position_with_reason(position, current_price, "AUTO_CLOSE_RANDOM_PRICE")
    def _process_trading_signal(self, symbol: str, signal_data: Dict):
        """Traite un signal de trading avec affichage d√©taill√©"""
        try:
            signal = signal_data['signal']
            confidence = signal_data['confidence']
            score = signal_data['score']
            reason = signal_data.get('reason', 'Analyse technique')
            
            # Log d√©taill√© du signal
            factors = signal_data.get('confidence_factors', [])
            factors_str = ', '.join(factors) if factors else 'N/A'
            
            self.log(f"üîç ANALYSE {symbol}: Signal={signal}, Score={score:.1f}, Conf={confidence:.2f}")
            self.log(f"   üìä Facteurs: {factors_str}")
            self.log(f"   üí° Raison: {reason}")
            
            # Gestion des positions existantes
            if symbol in self.positions:
                self._manage_existing_position(symbol, signal_data)
                return
            
            # Si la crypto est dans la watchlist, elle a D√âJ√Ä pass√© tous les filtres
            # Plus besoin de v√©rification suppl√©mentaire - TRADE AUTOMATIQUEMENT
            
            # Nouvelles opportunit√©s de trading
            if signal == 'BUY':
                self.log(f"üü¢ {symbol}: SIGNAL D'ACHAT d√©tect√© !")
                self._open_position(symbol, 'long', signal_data)
            elif signal == 'SELL':
                self.log(f"üî¥ {symbol}: SIGNAL DE VENTE d√©tect√© !")
                self._open_position(symbol, 'short', signal_data)
            else:
                self.log(f"üü° {symbol}: Maintien position (HOLD) - Score trop faible")
            
        except Exception as e:
            self.log(f"‚ùå Erreur traitement signal {symbol}: {e}")
    
    def _open_position(self, symbol: str, direction: str, signal_data: Dict):
        """Ouvre une nouvelle position avec d√©tails complets"""
        try:
            current_price = signal_data['price']
            score = signal_data['score']
            confidence = signal_data['confidence']
            rsi = signal_data.get('rsi', 0)
            macd = signal_data.get('macd', 0)
            
            # Calculer la taille de position
            balance = self.get_balance()
            position_size = self.risk_manager.calculate_position_size(balance, current_price)
            
            # Calculer stop loss seulement (syst√®me 3 couches utilis√©)
            stop_loss = self.risk_manager.calculate_stop_loss(current_price, direction)
            
            # Calcul valeur en USDT
            position_value = position_size * current_price
            
            if self.simulation_mode:
                # Mode simulation
                order_id = f"sim_{symbol}_{int(time.time())}"
                self.log(f"üéÆ SIMULATION - NOUVELLE POSITION")
            else:
                # Mode r√©el
                order = self._place_real_order(symbol, direction, position_size)
                if not order:
                    return
                order_id = order.get('id', 'unknown')
                self.log(f"üí∞ TRADING R√âEL - NOUVELLE POSITION")
            
            # Log d√©taill√© de l'ouverture
            self.log(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            self.log(f"üìà POSITION OUVERTE: {symbol}")
            self.log(f"   üéØ Direction: {direction.upper()}")
            self.log(f"   üí∞ Prix entr√©e: ${current_price:.6f}")
            self.log(f"   üìä Quantit√©: {position_size:.6f}")
            self.log(f"   üíµ Valeur: ${position_value:.2f} USDT")
            self.log(f"   üõ°Ô∏è Stop Loss: ${stop_loss:.6f} (-{self.risk_manager.stop_loss_percent}%)")
            self.log(f"   üìä Signal Score: {score:.1f}")
            self.log(f"   üé≤ Confiance: {confidence:.1%}")
            self.log(f"   üìà RSI: {rsi:.1f}")
            self.log(f"   üìä MACD: {macd:.6f}")
            self.log(f"   üÜî Order ID: {order_id}")
            self.log(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            
            # Enregistrer la position
            self.positions[symbol] = {
                'direction': direction,
                'size': position_size,
                'entry_price': current_price,
                'stop_loss': stop_loss,
                'timestamp': datetime.now(),
                'order_id': order_id,
                'signal_score': score,
                'confidence': confidence,
                'rsi_entry': rsi,
                'macd_entry': macd,
                'position_value': position_value
            }
            
            # Notifier les callbacks
            for callback in self.callbacks['position_update']:
                try:
                    callback('open', symbol, self.positions[symbol])
                except Exception:
                    pass
            
        except Exception as e:
            self.log(f"‚ùå Erreur ouverture position {symbol}: {e}")
    
    def _manage_existing_position(self, symbol: str, signal_data: Dict):
        """G√®re une position existante"""
        if symbol not in self.positions:
            return
        
        position = self.positions[symbol]
        current_price = signal_data['price']
        
        # V√©rifier stop loss
        if ((position['direction'] == 'long' and current_price <= position['stop_loss']) or
            (position['direction'] == 'short' and current_price >= position['stop_loss'])):
            self._close_position(symbol, "Stop Loss")
            return
    
    def _close_position(self, symbol: str, reason: str):
        """Ferme une position"""
        if symbol not in self.positions:
            return
        
        try:
            position = self.positions[symbol]
            current_price = self.websocket_manager.get_latest_price(symbol)
            
            if not current_price:
                return
            
            # Calculer P&L
            pnl = self._calculate_pnl(position, current_price)
            
            if not self.simulation_mode:
                # Ordre r√©el de fermeture
                self._place_real_close_order(symbol, position)
            
            # Supprimer la position
            del self.positions[symbol]
            
            self.log(f"üîê Position {symbol} ferm√©e - {reason} - P&L: {pnl:+.2f} USDT")
            
            # Notifier les callbacks
            for callback in self.callbacks['position_update']:
                try:
                    callback('close', symbol, {'reason': reason, 'pnl': pnl})
                except Exception:
                    pass
            
        except Exception as e:
            self.log(f"‚ùå Erreur fermeture position {symbol}: {e}")
    
    def _place_real_order(self, symbol: str, direction: str, amount: float):
        """Place un ordre r√©el sur l'exchange"""
        try:
            if not self.exchange:
                return None
            
            side = 'buy' if direction == 'long' else 'sell'
            order = self.exchange.create_market_order(symbol, side, amount)
            
            return order
            
        except Exception as e:
            self.log(f"‚ùå Erreur ordre r√©el {symbol}: {e}")
            return None
    
    def _place_real_close_order(self, symbol: str, position: Dict):
        """Place un ordre de fermeture r√©el"""
        try:
            if not self.exchange:
                return
            
            side = 'sell' if position['direction'] == 'long' else 'buy'
            self.exchange.create_market_order(symbol, side, position['size'])
            
        except Exception as e:
            self.log(f"‚ùå Erreur fermeture r√©elle {symbol}: {e}")
    
    def _calculate_pnl(self, position: Dict, current_price: float) -> float:
        """Calcule le P&L d'une position"""
        entry_price = position['entry_price']
        size = position['size']
        
        if position['direction'] == 'long':
            return (current_price - entry_price) * size
        else:
            return (entry_price - current_price) * size
    
    def get_balance(self) -> float:
        """R√©cup√®re le solde USDT via vos cl√©s priv√©es"""
        try:
            balance = self.exchange.fetch_balance()
            return balance.get('USDT', {}).get('free', 0.0)
        except Exception as e:
            self.log(f"‚ùå Erreur r√©cup√©ration balance via cl√©s priv√©es: {e}")
            return 0.0
    
    def get_positions_summary(self) -> Dict:
        """Retourne un r√©sum√© des positions"""
        if not self.positions:
            return {'count': 0, 'total_pnl': 0}
        
        total_pnl = 0
        for symbol, position in self.positions.items():
            current_price = self.websocket_manager.get_latest_price(symbol)
            if current_price:
                pnl = self._calculate_pnl(position, current_price)
                total_pnl += pnl
        
        return {
            'count': len(self.positions),
            'total_pnl': total_pnl,
            'symbols': list(self.positions.keys())
        }
    
    def toggle_simulation_mode(self, confirm_real: bool = False):
        """Bascule entre mode simulation et r√©el"""
        if not self.simulation_mode and not confirm_real:
            self.log("‚ö†Ô∏è Passage en mode r√©el n√©cessite une confirmation")
            return False
        
        self.simulation_mode = not self.simulation_mode
        mode_str = "SIMULATION" if self.simulation_mode else "R√âEL"
        self.log(f"üîÑ Mode bascul√© vers: {mode_str}")
        
        return True
    
    def start(self):
        """D√©marre le bot"""
        if self.is_running:
            self.log("‚ö†Ô∏è Bot d√©j√† en cours d'ex√©cution")
            return
        
        self.log("üöÄ D√©marrage du bot de trading...")
        
        # Marquer comme en cours d'ex√©cution AVANT la configuration
        self.is_running = True
        
        # √âTAPE 1: Initialiser l'exchange avec vos cl√©s priv√©es
        if not self._initialize_exchange():
            self.log("‚ùå Impossible de se connecter avec vos cl√©s priv√©es")
            self.log("   V√©rifiez vos cl√©s API dans l'onglet Configuration")
            self.is_running = False
            return
        
        # √âTAPE 2: Configuration de la watchlist
        self.setup_watchlist()
        
        # √âTAPE 3: Configuration WebSockets
        self.setup_websockets()
        
        # √âTAPE 4: Gestion du solde selon le mode
        if self.simulation_mode:
            # Mode simulation - utiliser balance simul√©e
            self.balance = self.simulated_balance
            self.log(f"üí∞ Solde SIMUL√â: {self.balance:.2f} USDT")
        else:
            # Mode r√©el - r√©cup√©rer vraie balance
            self.balance = self.get_balance()
            self.log(f"üí∞ Solde R√âEL: {self.balance:.2f} USDT")
        
        # Notifier la balance initiale au GUI
        for callback in self.callbacks.get('balance_update', []):
            try:
                callback(self.balance, len(self.open_positions))
            except Exception:
                pass
        
        self.log("‚úÖ Bot d√©marr√© avec succ√®s")
        
        # Si pas de watchlist, le scan continu va chercher automatiquement
        if not self.watchlist:
            self.log("üîç Aucune watchlist configur√©e - Le scan continu recherchera automatiquement")
        else:
            self.log(f"üìã Watchlist configur√©e: {self.watchlist}")
    
    def stop(self):
        """Arr√™te le bot"""
        if not self.is_running:
            return
        
        self.log("üõë Arr√™t du bot...")
        
        # Arr√™ter le syst√®me de fallback
        if hasattr(self, '_fallback_running'):
            self._fallback_running = False
        
        # Fermer toutes les positions
        for symbol in list(self.positions.keys()):
            self._close_position(symbol, "Arr√™t du bot")
        
        # Arr√™ter les WebSockets
        if self.websocket_manager:
            self.websocket_manager.stop_all_streams()
        
        self.is_running = False
        self.log("‚úÖ Bot arr√™t√©")

# Test du moteur
if __name__ == "__main__":
    from config_manager import ConfigManager
    
    print("üß™ Test du moteur de trading")
    
    # Charger la configuration
    config = ConfigManager()
    
    # Cr√©er le bot
    bot = CryptoTradingBot(config)
    
    # D√©marrer
    bot.start()
    
    try:
        # Laisser tourner pendant 30 secondes
        time.sleep(30)
        
        # Afficher les statistiques
        positions = bot.get_positions_summary()
        print(f"üìä Positions: {positions}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Arr√™t demand√©")
    finally:
        bot.stop()
        print("‚úÖ Test termin√©")